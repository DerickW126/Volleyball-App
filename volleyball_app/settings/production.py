"""
Django settings for volleyball_app project.

Generated by 'django-admin startproject' using Django 5.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
from pathlib import Path
import firebase_admin
import tempfile
import base64
import json
from firebase_admin import credentials
from firebase_admin import initialize_app
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# Debug mode, set to False in production
DEBUG = os.environ.get('DEBUG', 'False') == 'True'

# Allowed hosts
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', '').split(',')
#ALLOWED_HOSTS = ['ec2-18-183-213-23.ap-northeast-1.compute.amazonaws.com','localhost', '18.183.213.23', '43.207.235.105', '172.31.35.113']


# Application definition

INSTALLED_APPS = [
    'django_celery_beat',
    'fcm_django',
    'channels',
    'daphne',
    'push_notifications',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'events',
    'notifications',
	'users',
    'django.contrib.sites',  # 必须的
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.apple',
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',
    'rest_framework.authtoken',
    'rest_framework_simplejwt.token_blacklist',
    'dj_rest_auth',
    'dj_rest_auth.registration',
]

apns_key_content = os.environ.get('APN_KEY')
with open('/tmp/apns_key.p8', 'w') as key_file:
    key_file.write(apns_key_content)

PUSH_NOTIFICATIONS_SETTINGS = {
    'APNS_AUTH_KEY_PATH': '/tmp/apns_key.p8',  # Path to your .p8 file
    'APNS_AUTH_KEY_ID': 'KN37N434TH',  # The Key ID obtained from the Apple Developer portal
    'APNS_TEAM_ID': 'UUNQ4YYJ6A',  # Your Apple Developer Team ID
    'APNS_TOPIC': 'com.bros.volleyballproject',  # Usually your app's bundle identifier
    "FCM_API_KEY": "AIzaSyCIowXkDxD9F5-KoS9ONGUXc87dRDeeT4A",
}
AUTH_USER_MODEL = 'users.CustomUser'
ASGI_APPLICATION = 'volleyball_app.asgi.application'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [os.environ.get('REDIS_URL', 'redis://localhost:6379')],
        },
    },
}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        #'rest_framework.authentication.SessionAuthentication',
        #'rest_framework.authentication.BasicAuthentication',
    ),
}

from datetime import timedelta
import datetime

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=50),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=10),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
}

import ssl
from kombu import Connection

# RabbitMQ URL with SSL
BROKER_URL = os.environ.get('CLOUDAMQP_URL', 'amqp://guest:guest@localhost//').replace('amqps://', 'amqp://')

CELERY_BROKER_URL = BROKER_URL
CELERY_RESULT_BACKEND = 'rpc://'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Asia/Taipei'
SITE_ID = 1

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
]

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
APPLE_PRIVATE_KEY = os.environ.get('APN_KEY')
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': os.environ.get('GOOGLE_CLIENT_ID'),
            'secret': os.environ.get('GOOGLE_SECRET'),
            'key': ''
        }, 
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }, 
    'apple': {
        'APP': {
            'APPLE_CLIENT_ID': os.environ.get('APPLE_CLIENT_ID'),  # Your app's client ID
            'APPLE_TEAM_ID': os.environ.get('APPLE_TEAM_ID'),  # Your Apple Developer Team ID
            'APPLE_KEY_ID': os.environ.get('APPLE_KEY_ID'), 
            'secret': os.environ.get('APN_KEY')  # The private key you downloaded
        },
        'SCOPE': ['name', 'email'],
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'allauth.account.middleware.AccountMiddleware', 
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATIC_URL = '/static/'

# Simplified static file serving using Whitenoise
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

CORS_ORIGIN_ALLOW_ALL = False
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React app running on port 3000
    "http://localhost:8000",  # Django server
    "http://localhost:19006",  # React Native app running on port 19006 (if using Expo)
    # You can add more origins if needed
]

ROOT_URLCONF = 'volleyball_app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'volleyball_app.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
'''
DATABASES = {
    'default': dj_database_url.config(default=os.environ.get('DATABASE_URL'))
}
'''
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'volleyball_app_db',       # The name of the database you created
        'USER': 'derick',            # The username you created
        'PASSWORD': 'derick2005',    # The password you set for the user
        'HOST': 'localhost',          # The host (use 'localhost' if running locally)
        'PORT': '5432',               # The default PostgreSQL port
    }
}
'''

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Taipei'
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


firebase_cred_content = os.environ.get('FIREBASE_CRED')

# Write the Firebase credentials to a temporary file
with tempfile.NamedTemporaryFile(delete=False, suffix='.json') as temp_file:
    temp_file.write(firebase_cred_content.encode())  # Write the key as bytes
    temp_file_path = temp_file.name

# Use the temp file path with firebase_admin
cred = credentials.Certificate(temp_file_path)
# settings.py
#cred = credentials.Certificate(os.environ.get('FIREBASE_CRED'))
FIREBASE_APP = initialize_app(cred)
# To learn more, visit the docs here:
# https://cloud.google.com/docs/authentication/getting-started>

FCM_DJANGO_SETTINGS = {
     # an instance of firebase_admin.App to be used as default for all fcm-django requests
     # default: None (the default Firebase app)
    "DEFAULT_FIREBASE_APP": None,
     # default: _('FCM Django')
    "APP_VERBOSE_NAME": "[string for AppConfig's verbose_name]",
     # true if you want to have only one active device per registered user at a time
     # default: False
    "ONE_DEVICE_PER_USER": False,
     # devices to which notifications cannot be sent,
     # are deleted upon receiving error response from FCM
     # default: False
    "DELETE_INACTIVE_DEVICES": True,
}

SECURE_SSL_REDIRECT = False  # Heroku handles SSL for you
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
SESSION_COOKIE_SECURE = True
CSRF_COOKIE_SECURE = True
SECURE_HSTS_SECONDS = 3600
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True